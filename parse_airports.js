// Script que genera un enum con IATA CODES y otro con los nombres
// Solo es necesario instalar la libreria csv-parse, el resto es nativo de Node
const { parse } = require("csv-parse");
const { createReadStream } = require("fs");
const { writeFile } = require("fs/promises");
const { pipeline } = require("stream");

const dateNow = new Date();

const CSV_URL =
  "https://github.com/opentraveldata/opentraveldata/raw/master/opentraveldata/optd_por_public.csv";
const WRITE_CSV_PATH = `./airports-${dateNow.getDate()}-${
  dateNow.getMonth() + 1
}-${dateNow.getFullYear()}.csv`;
const WRITE_JSON_PATH = `./airports-${dateNow.getDate()}-${
  dateNow.getMonth() + 1
}-${dateNow.getFullYear()}.json`;

const FILTER_AIRPORTS = [
  "LBA",
  "PSA",
  "MME",
  "ALG",
  "FCO",
  "HAJ",
  "AMS",
  "PEG",
  "SFT",
  "BGO",
  "DSS",
  "NDR",
  "CCS",
  "SBK",
  "DBV",
  "KRK",
  "GOA",
  "NAP",
  "HEL",
  "LAX",
  "ARN",
  "LIG",
  "OLB",
  "MUC",
  "EIN",
  "ATH",
  "TLS",
  "RTM",
  "LPA",
  "JFK",
  "TRD",
  "LHR",
  "LIL",
  "SDX",
  "DOH",
  "FUE",
  "YHZ",
  "STN",
  "GLA",
  "CUN",
  "ROS",
  "JMK",
  "PSR",
  "LIN",
  "OUD",
  "ETZ",
  "CLO",
  "AGP",
  "ORD",
  "TFS",
  "PUJ",
  "PGF",
  "FNI",
  "CWL",
  "KEF",
  "HME",
  "PMI",
  "RBA",
  "TER",
  "HER",
  "MMX",
  "TNG",
  "BSL",
  "IBZ",
  "VIE",
  "BGY",
  "LIM",
  "EAS",
  "GUA",
  "LRT",
  "CMN",
  "PUF",
  "RMI",
  "DUS",
  "CFE",
  "RGS",
  "PRG",
  "CTA",
  "PTY",
  "RMU",
  "ORN",
  "SDQ",
  "SCQ",
  "AMM",
  "XFW",
  "SDR",
  "VCE",
  "MVD",
  "VGO",
  "BRU",
  "MPL",
  "MXP",
  "LBG",
  "RUH",
  "NTE",
  "BDS",
  "VIT",
  "XRY",
  "MAN",
  "BOD",
  "MEX",
  "LPL",
  "OSR",
  "LEN",
  "BER",
  "ASU",
  "UIO",
  "SCL",
  "LNZ",
  "TTU",
  "TMP",
  "LYS",
  "ILD",
  "ERH",
  "SFO",
  "TLN",
  "ZAZ",
  "DSA",
  "ZAD",
  "SLM",
  "CDG",
  "BRS",
  "INV",
  "VNO",
  "TSF",
  "GRO",
  "HAM",
  "LCG",
  "BRI",
  "CFU",
  "RAK",
  "PMO",
  "RAI",
  "LUX",
  "BLL",
  "GRU",
  "PDL",
  "NCE",
  "BOS",
  "RJL",
  "BFS",
  "LGW",
  "BJZ",
  "BIO",
  "REU",
  "GVA",
  "OPO",
  "ANE",
  "FMO",
  "WAW",
  "FNC",
  "TRS",
  "FAO",
  "MIA",
  "CFR",
  "MAH",
  "WMI",
  "MAD",
  "BVE",
  "SAL",
  "LIS",
  "GNB",
  "LEI",
  "MLN",
  "IAH",
  "ORY",
  "LEJ",
  "TOJ",
  "HGH",
  "BGI",
  "MLE",
  "TFN",
  "PVG",
  "LEU",
  "ACE",
  "BIQ",
  "RNS",
  "GIG",
  "SXB",
  "ZAG",
  "MRS",
  "STR",
  "CAG",
  "OST",
  "NAT",
  "FRA",
  "DOL",
  "OVD",
  "IST",
  "LTN",
  "LXR",
  "ZRH",
  "BLQ",
  "TLV",
  "TRN",
  "EMA",
  "AAL",
  "VRN",
  "OSL",
  "YYT",
  "TLL",
  "CDT",
  "BOH",
  "BCN",
  "BHX",
  "TIA",
  "HAV",
  "RIX",
  "FDH",
  "SID",
  "PIS",
  "XCR",
  "BOG",
  "KLU",
  "JTR",
  "REC",
  "VLL",
  "LDE",
  "FLR",
  "RZE",
  "NCL",
  "EZE",
  "BCM",
  "GOT",
  "BRE",
  "DUB",
  "IAD",
  "SJO",
  "MST",
  "SPC",
  "AZR",
  "SSA",
  "GRQ",
  "HHN",
  "VLC",
  "ALC",
  "EDI",
  "SPU",
  "PNA",
  "BUD",
  "ADA",
  "MLA",
  "DFW",
  "GHA",
  "NRN",
  "CPH",
  "WOE",
  "SZG",
  "GYE",
  "GRX",
  "TBS",
  "NUE",
  "SJU",
  "CAI",
  "LJU",
  "BEG",
  "RJK",
  "SVQ",
];

const bootstrap = async () => {
  const res = await fetch(CSV_URL);

  if (!res.ok) throw new Error("Download CSV error");

  const csvData = await res.text();
  await writeFile(WRITE_CSV_PATH, csvData);

  const results = [];
  const readStream = createReadStream(WRITE_CSV_PATH);

  const parser = parse({
    columns: true,
    skip_empty_lines: true,
    relax_quotes: true,
    delimiter: "^",
  });

  parser.on("data", (record) => {
    if (!FILTER_AIRPORTS.includes(record.iata_code)) return;
    results.push({
      code: record.iata_code,
      countryCode: record.country_code,
      timezone: record.timezone,
      offset: {
        gmt: parseInt(record.gmt_offset),
        dst: parseInt(record.dst_offset),
      },
    });
  });

  parser.on("end", async () => {
    await writeFile(WRITE_JSON_PATH, JSON.stringify(results));
  });

  pipeline(readStream, parser, (err) => console.error(err));
};

bootstrap();
